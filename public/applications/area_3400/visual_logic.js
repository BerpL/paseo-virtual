/**
 * Generated by Verge3D Puzzles v.3.6.0
 * Mon May 10 2021 11:49:46 GMT-0500 (hora est√°ndar de Colombia)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.objClickInfo = [];
_pGlob.pickedObject = '';
_pGlob.objHoverInfo = [];
_pGlob.hoveredObject = '';
_pGlob.objMovementInfos = {};
_pGlob.objDragOverCallbacks = [];
_pGlob.objDragOverInfoByBlock = {}
_pGlob.dragMoveOrigins = {};
_pGlob.dragScaleOrigins = {};
_pGlob.mediaElements = {};
_pGlob.loadedFiles = {};
_pGlob.loadedFile = '';
_pGlob.promiseValue = '';
_pGlob.animMixerCallbacks = [];
_pGlob.arHitPoint = new v3d.Vector3(0, 0, 0);
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.animateParamUpdate = null;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.gamepadIndex = 0;

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();
_pGlob.intervals = {};

var _pPhysics = {};

_pPhysics.tickCallbacks = [];
_pPhysics.syncList = [];
_pPhysics.consList = [];

// internal info
_pPhysics.collisionData = [];

// goes to collision callback
_pPhysics.collisionInfo = {
    objectA: '',
    objectB: '',
    distance: 0,
    positionOnA: [0, 0, 0],
    positionOnB: [0, 0, 0],
    normalOnB: [0, 0, 0]
};

var _noWebAudioReported = false;

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};

_pGlob.wooProductInfo = {};


PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 worng behavior
            elem.setAttribute(attr, value);
        } else {
            elem[attr] = value;
        }
    }
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}




// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = false;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'loading_percentage', true);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_screen', true);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["setUserPosition"] = setUserPosition;
this.procedures["goBack"] = goBack;
this.procedures["setInformacion"] = setInformacion;

var PROC = {
    "setUserPosition": setUserPosition,
    "goBack": goBack,
    "setInformacion": setInformacion,
};

var active_cam, cam_id, operador, information_id, equipos_3500, equipos_3400, getParameter, operadores_visibles, i;


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 worng behavior
            elem.setAttribute(attr, value);
        } else {
            elem[attr] = value;
        }
    }
}



// callJSFunction puzzle
function getJSFunction(funcName) {
    var jsFunc = appInstance.ExternalInterface[funcName];
    if (typeof jsFunc == "function")
        return jsFunc;
    else
        return function() {};
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return (obj.type !== "AmbientLight" && obj.name !== ""
            && !(obj.isMesh && obj.isMaterialGeneratedMesh));
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc;
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// setActiveCamera puzzle
function setActiveCamera(camName) {
    var camera = getObjectByName(camName);
    if (!camera || !camera.isCamera || appInstance.camera == camera)
        return;
    appInstance.setCamera(camera);
}



// show and hide puzzles
function changeVis(objNames, bool) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}




/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = appInstance.camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (appInstance.camera.parent) {
            appInstance.camera.parent.worldToLocal(worldPos);
        }
        appInstance.camera.position.copy(worldPos);
        appInstance.camera.lookAt(worldTarget);
        doSlot();
    }
}


// Describe this function...
function setUserPosition(active_cam, cam_id, operador) {
  tweenCamera(operador, active_cam, 2, function() {
    if (cam_id != false) {
      setHTMLElemAttribute('value', cam_id, 'estado_equipo', true);
      getJSFunction('emitirEstadoEquipo')();
    }
    setActiveCamera(active_cam);
    changeVis(operadores_visibles, true);
    changeVis(operador, false);
  }, 1);
}


// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback, false);
    }
}



// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {
        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.camera);
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



// whenClicked puzzle
function registerOnClick(objNames, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {
    objNames = retrieveObjectNames(objNames) || [];

    var objNamesFiltered = objNames.filter(function(name) {
        return name;
    });

    // for AR/VR
    _pGlob.objClickInfo.push({
        objNames: objNamesFiltered,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj(objNamesFiltered, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }

        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}


// Describe this function...
function goBack() {
  setActiveCamera('Cam_paneo');
  changeVis(operadores_visibles, true);
  tweenCamera('ref_cam_paneo', 'Object12919', 2, function() {}, 1);
}

// Describe this function...
function setInformacion(information_id) {
  setHTMLElemAttribute('value', information_id, 'estado_animacion', true);
  getJSFunction('emitirEstadoAnimacion')();
}


// getUrlData puzzle
function getUrlData(kind, isParent) {

    var targetWindow = isParent ? window.parent : window;
    switch (kind) {
    case 'URL':
        return targetWindow.location.href;
    case 'PARAMS':
        return v3d.AppUtils.getPageParams(targetWindow);
    case 'HOSTNAME':
        return targetWindow.location.hostname;
    default:
        console.error('getUrlData: option does not exists.');
        return '';
    }

}



eventHTMLElem('click', 'go-back', true, function(event) {
  goBack();
});
eventHTMLElem('click', 'go-area', true, function(event) {
  goBack();
});
eventHTMLElem('click', 'cam-tanque-acondicionador', true, function(event) {
  setUserPosition('Cam_3410-TK-001', false, 'ubi_3410-TK-001');
});
eventHTMLElem('click', 'cam-celdas-flotacion-rougher', true, function(event) {
  setUserPosition('cam_3410-FT-001@005', false, 'ubi_3410-FT-001@005');
});
eventHTMLElem('click', 'cam-celdas-flotacion-limpieza', true, function(event) {
  setUserPosition('Cam_3410-FT-011@014', false, 'ubi_3410-FT-011@014');
});
eventHTMLElem('click', 'cam-celdas-columna-flotacion', true, function(event) {
  setUserPosition('Cam_3410-FT-031/032', false, 'ubi_3410-FT-031/032');
});
eventHTMLElem('click', 'cam-sistema-lavador-gases', true, function(event) {
  setUserPosition('Cam_3410-SK-003', false, 'ubi_3410-SK-003');
});
eventHTMLElem('click', 'cam-espesador-concentrado-molibdeno', true, function(event) {
  setUserPosition('Cam_3410-TH-001', false, 'ubi_3410-TH-001');
});
eventHTMLElem('click', 'cam-colector-polvo-tolva', true, function(event) {
  setUserPosition('Cam_3410-XM-002', false, 'ubi_3410-BH-001');
});
eventHTMLElem('click', 'cam-filtro-concentrado-molibdeno', true, function(event) {
  setUserPosition('Cam_3410-FL-001', false, 'ubi_3410-FL-001');
});
eventHTMLElem('click', 'cam-secador-concentrado-molibdeno', true, function(event) {
  setUserPosition('Cam_3410-DR-001', false, 'ubi_3410-DR-001');
});

registerOnClick('inf_3410-TK-001', false, false, [0,1,2], function() {
  setInformacion('tanque-acondicionador');
}, function() {});
registerOnClick('inf_3410-FT-011@014', false, false, [0,1,2], function() {
  setInformacion('celdas-flotacion-primera-limpieza-fila-1');
}, function() {});
registerOnClick('inf_3410-FT-015@018', false, false, [0,1,2], function() {
  setInformacion('celdas-flotacion-primera-limpieza-fila-2');
}, function() {});
registerOnClick('inf_3410-FT-001@005', false, false, [0,1,2], function() {
  setInformacion('celdas-flotacion-rougher-fila-1');
}, function() {});
registerOnClick('inf_3410-FT-006@010', false, false, [0,1,2], function() {
  setInformacion('celdas-flotacion-rougher-fila-2');
}, function() {});
registerOnClick('inf_3410-FT-023@026', false, false, [0,1,2], function() {
  setInformacion('celdas-flotacion-segunda-limpieza-fila-1');
}, function() {});
registerOnClick('inf_3410-FT-027@030', false, false, [0,1,2], function() {
  setInformacion('celdas-flotacion-segunda-limpieza-fila-2');
}, function() {});
registerOnClick('inf_3410-FT-031/032', false, false, [0,1,2], function() {
  setInformacion('celda-columna-flotacion-tercera-limpieza');
}, function() {});
registerOnClick('inf_3410-FT-031/032_b', false, false, [0,1,2], function() {
  setInformacion('celda-columna-flotacion-cuarta-limpieza');
}, function() {});
registerOnClick('inf_3410-TH-001', false, false, [0,1,2], function() {
  setInformacion('espesador-concentrado-molibdeno');
}, function() {});
registerOnClick('inf_3410-SK-003', false, false, [0,1,2], function() {
  setInformacion('sistema-lavador-gases');
}, function() {});
registerOnClick('inf_3410-SK-003_b', false, false, [0,1,2], function() {
  setInformacion('sistema-lavador-gases-2');
}, function() {});
registerOnClick('inf_3410-BH-001', false, false, [0,1,2], function() {
  setInformacion('colector-polvo-tolva-concentrado-molibdeno');
}, function() {});
registerOnClick('inf_3410-BN-001_b', false, false, [0,1,2], function() {
  setInformacion('tolva-almacenamiento-concentrado-molibdeno');
}, function() {});
registerOnClick('inf_3410-FL-001', false, false, [0,1,2], function() {
  setInformacion('filtro-concentrado-molibdeno');
}, function() {});
registerOnClick('inf_3410-DR-001', false, false, [0,1,2], function() {
  setInformacion('secador-concentrado-molibdeno');
}, function() {});

registerOnClick('ubi_3410-TK-001', false, false, [0,1,2], function() {
  setUserPosition('Cam_3410-TK-001', 'ubi_3410-TK-001', 'ubi_3410-TK-001');
}, function() {});
registerOnClick('ubi_3410-FT-001@005', false, false, [0,1,2], function() {
  setUserPosition('cam_3410-FT-001@005', 'ubi_3410-FT-001@005', 'ubi_3410-FT-001@005');
}, function() {});
registerOnClick('ubi_3410-FT-011@014', false, false, [0,1,2], function() {
  setUserPosition('Cam_3410-FT-011@014', 'ubi_3410-FT-011@014', 'ubi_3410-FT-011@014');
}, function() {});
registerOnClick('ubi_3410-FT-031/032', false, false, [0,1,2], function() {
  setUserPosition('Cam_3410-FT-031/032', 'ubi_3410-FT-031/032', 'ubi_3410-FT-031/032');
}, function() {});
registerOnClick('ubi_3410-SK-003', false, false, [0,1,2], function() {
  setUserPosition('Cam_3410-SK-003', 'ubi_3410-SK-003', 'ubi_3410-SK-003');
}, function() {});
registerOnClick('ubi_3410-TH-001', false, false, [0,1,2], function() {
  setUserPosition('Cam_3410-TH-001', 'ubi_3410-TH-001', 'ubi_3410-TH-001');
}, function() {});
registerOnClick('ubi_3410-BH-001', false, false, [0,1,2], function() {
  setUserPosition('Cam_3410-XM-002', 'ubi_3410-BH-001', 'ubi_3410-BH-001');
}, function() {});
registerOnClick('ubi_3410-FL-001', false, false, [0,1,2], function() {
  setUserPosition('Cam_3410-FL-001', 'ubi_3410-FL-001', 'ubi_3410-FL-001');
}, function() {});
registerOnClick('ubi_3410-DR-001', false, false, [0,1,2], function() {
  setUserPosition('Cam_3410-DR-001', 'ubi_3410-DR-001', 'ubi_3410-DR-001');
}, function() {});

registerOnClick('inf_3520-PU-025', false, false, [0,1,2], function() {
  setInformacion('bomba-descarga-diesel-planta-molibdeno');
}, function() {});
registerOnClick('inf_3520-PU-036', false, false, [0,1,2], function() {
  setInformacion('bomba-transferencia-diesel-planta-molibdeno');
}, function() {});
registerOnClick('inf_3520-TK-017', false, false, [0,1,2], function() {
  setInformacion('tanque-diario-diesel-planta-molibdeno');
}, function() {});
registerOnClick('inf_3530-PU-001', false, false, [0,1,2], function() {
  setInformacion('bomba-descarga-nahs');
}, function() {});
registerOnClick('inf_3530-PU-002', false, false, [0,1,2], function() {
  setInformacion('bomba-transferencia-nahs-2');
}, function() {});
registerOnClick('inf_3530-PU-003', false, false, [0,1,2], function() {
  setInformacion('bomba-transferencia-nahs-3');
}, function() {});
registerOnClick('inf_3530-PU-006', false, false, [0,1,2], function() {
  setInformacion('bombas-circuito-nahs-6');
}, function() {});
registerOnClick('inf_3530-PU-007', false, false, [0,1,2], function() {
  setInformacion('bombas-circuito-nahs-7');
}, function() {});
registerOnClick('inf_3530-TK-004', false, false, [0,1,2], function() {
  setInformacion('tanque-diario-nahs');
}, function() {});

eventHTMLElem('click', 'cam-bomba-descarga-diesel-planta-molibdeno', true, function(event) {
  setUserPosition('Camera_3520-PU-025', false, 'ubi_3520-PU-025');
});
eventHTMLElem('click', 'cam-bomba-descarga-nahs', true, function(event) {
  setUserPosition('Camera_3530-PU-001', false, 'ubi_3530-PU-001');
});
eventHTMLElem('click', 'cam-bomba-transferencia-nahs', true, function(event) {
  setUserPosition('Camera_3530-PU-002/003', false, 'ubi_3530-PU-002/003');
});
eventHTMLElem('click', 'cam-bomba-circuito-nahs', true, function(event) {
  setUserPosition('Camera_3530-PU-006/007', false, 'ubi_3530-PU-006/007');
});
eventHTMLElem('click', 'cam-tanque-diario-nahs', true, function(event) {
  setUserPosition('Camera_3530-TK-004', false, 'ubi_3530-TK-004');
});

registerOnClick('ubi_3520-PU-025', false, false, [0,1,2], function() {
  setUserPosition('Camera_3520-PU-025', 'operador-bomba-descarga-diesel-planta-molibdeno', 'ubi_3520-PU-025');
}, function() {});
registerOnClick('ubi_3530-PU-001', false, false, [0,1,2], function() {
  setUserPosition('Camera_3530-PU-001', 'operador-bomba-descarga-nahs', 'ubi_3530-PU-001');
}, function() {});
registerOnClick('ubi_3530-PU-002/003', false, false, [0,1,2], function() {
  setUserPosition('Camera_3530-PU-002/003', 'operador-bomba-transferencia-nahs', 'ubi_3530-PU-002/003');
}, function() {});
registerOnClick('ubi_3530-PU-006/007', false, false, [0,1,2], function() {
  setUserPosition('Camera_3530-PU-006/007', 'operador-bomba-circuito-nahs', 'ubi_3530-PU-006/007');
}, function() {});
registerOnClick('ubi_3530-TK-004', false, false, [0,1,2], function() {
  setUserPosition('Camera_3530-TK-004', 'operador-tanque-diario-nahs', 'ubi_3530-TK-004');
}, function() {});

equipos_3500 = ['ubi_3520-PU-025', 'ubi_3530-PU-001', 'ubi_3530-PU-002/003', 'ubi_3530-PU-006/007', 'ubi_3530-TK-004', 'inf_3520-PU-025', 'inf_3520-PU-036', 'inf_3520-TK-017', 'inf_3530-PU-001', 'inf_3530-PU-002', 'inf_3530-PU-003', 'inf_3530-PU-006', 'inf_3530-PU-007', 'inf_3530-TK-004'];
equipos_3400 = ['ubi_3410-TK-001', 'ubi_3410-FT-001@005', 'ubi_3410-FT-011@014', 'ubi_3410-FT-031/032', 'ubi_3410-SK-003', 'ubi_3410-TH-001', 'ubi_3410-BH-001', 'ubi_3410-FL-001', 'ubi_3410-DR-001', 'inf_3410-BH-001', 'inf_3410-BN-001_b', 'inf_3410-DR-001', 'inf_3410-FL-001', 'inf_3410-FT-001@005', 'inf_3410-FT-006@010', 'inf_3410-FT-011@014', 'inf_3410-FT-015@018', 'inf_3410-FT-023@026', 'inf_3410-FT-027@030', 'inf_3410-FT-031/032', 'inf_3410-FT-031/032_b', 'inf_3410-SK-003', 'inf_3410-SK-003_b', 'inf_3410-TH-001', 'inf_3410-TK-001'];
getParameter = getUrlData('PARAMS', false);
for (var i_index in getParameter) {
  i = getParameter[i_index];
  getParameter = i;
}
if (getParameter == 3500) {
  operadores_visibles = ['ubi_3520-PU-025', 'ubi_3530-PU-001', 'ubi_3530-PU-002/003', 'ubi_3530-PU-006/007', 'ubi_3530-TK-004'];
  changeVis(equipos_3400, false);
} else {
  operadores_visibles = ['ubi_3410-TK-001', 'ubi_3410-FT-001@005', 'ubi_3410-FT-011@014', 'ubi_3410-FT-031/032', 'ubi_3410-SK-003', 'ubi_3410-TH-001', 'ubi_3410-BH-001', 'ubi_3410-FL-001', 'ubi_3410-DR-001'];
  changeVis(equipos_3500, false);
}



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
